/*
 * Copyright (c) 2014-2025 Wurst-Imperium and contributors.
 *
 * This source code is subject to the terms of the GNU General Public
 * License, version 3. If a copy of the GPL was not distributed with this
 * file, You can obtain one at: https://www.gnu.org/licenses/gpl-3.0.txt
 */
package net.wurstclient.hacks;

import java.awt.Color;
import java.util.LinkedList;
import java.util.Queue;

import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Vec3d;
import net.wurstclient.Category;
import net.wurstclient.SearchTags;
import net.wurstclient.events.PacketInputListener;
import net.wurstclient.events.PacketOutputListener;
import net.wurstclient.events.RenderListener;
import net.wurstclient.events.UpdateListener;
import net.wurstclient.hack.Hack;
import net.wurstclient.settings.CheckboxSetting;
import net.wurstclient.settings.ColorSetting;
import net.wurstclient.settings.SliderSetting;
import net.wurstclient.util.RenderUtils;

@SearchTags({"chorus exploit", "chorus delay", "teleport delay"})
public final class ChorusExploitHack extends Hack implements UpdateListener,
	PacketInputListener, PacketOutputListener, RenderListener
{
	private final CheckboxSetting onItemSwitch = new CheckboxSetting(
		"TP on switch", "Teleports you when you switch items.", true);
	
	private final CheckboxSetting onDeactivate =
		new CheckboxSetting("TP on deactivate",
			"Teleports you when the module is deactivated.", false);
	
	private final CheckboxSetting autoTeleport = new CheckboxSetting(
		"Auto teleport",
		"Automatically teleports you after a fixed number of ticks.", false);
	
	private final SliderSetting ticksToTeleport =
		new SliderSetting("Ticks to teleport",
			"The amount of ticks to wait before automatically teleporting.", 40,
			0, 100, 1, SliderSetting.ValueDisplay.INTEGER);
	
	private final CheckboxSetting renderActual =
		new CheckboxSetting("Render actual position",
			"Sets you clientside to your actual position.", true);
	
	private final CheckboxSetting drawLine = new CheckboxSetting("Draw line",
		"Draws a line to where you are going to be.", true);
	
	private final ColorSetting lineColor =
		new ColorSetting("Line color", "The line's color.", Color.LIGHT_GRAY);
	
	private int slot;
	private int delay = 0;
	private boolean ateChorus = false;
	private boolean sending = false;
	private boolean gotPosition = false;
	private boolean wasUsingChorus = false;
	private double posX, posY, posZ, cposX, cposY, cposZ;
	private final Queue<TeleportConfirmC2SPacket> telePackets =
		new LinkedList<>();
	
	public ChorusExploitHack()
	{
		super("ChorusExploit");
		setCategory(Category.MOVEMENT);
		addSetting(onItemSwitch);
		addSetting(onDeactivate);
		addSetting(autoTeleport);
		addSetting(ticksToTeleport);
		addSetting(renderActual);
		addSetting(drawLine);
		addSetting(lineColor);
	}
	
	@Override
	protected void onEnable()
	{
		ateChorus = false;
		delay = 0;
		telePackets.clear();
		gotPosition = false;
		wasUsingChorus = false;
		
		EVENTS.add(UpdateListener.class, this);
		EVENTS.add(PacketInputListener.class, this);
		EVENTS.add(PacketOutputListener.class, this);
		EVENTS.add(RenderListener.class, this);
	}
	
	@Override
	protected void onDisable()
	{
		if(ateChorus && onDeactivate.isChecked())
			sendPackets();
		
		telePackets.clear();
		gotPosition = false;
		wasUsingChorus = false;
		
		EVENTS.remove(UpdateListener.class, this);
		EVENTS.remove(PacketInputListener.class, this);
		EVENTS.remove(PacketOutputListener.class, this);
		EVENTS.remove(RenderListener.class, this);
	}
	
	@Override
	public void onUpdate()
	{
		// Detect when chorus fruit usage finishes
		boolean isUsingChorus = MC.player.isUsingItem()
			&& MC.player.getActiveItem().getItem() == Items.CHORUS_FRUIT;
		
		if(!ateChorus && wasUsingChorus && !isUsingChorus)
		{
			// Player just finished eating chorus fruit
			posX = MC.player.getX();
			posY = MC.player.getY();
			posZ = MC.player.getZ();
			ateChorus = true;
			slot = MC.player.getInventory().getSelectedSlot();
		}
		
		wasUsingChorus = isUsingChorus;
		
		if(ateChorus)
		{
			delay++;
			
			// Keep player at original position if render actual is enabled
			Vec3d currentPos =
				new Vec3d(MC.player.getX(), MC.player.getY(), MC.player.getZ());
			if(!currentPos.equals(new Vec3d(posX, posY, posZ))
				&& renderActual.isChecked())
				MC.player.setPosition(posX, posY, posZ);
			
			// Auto teleport after delay
			if(autoTeleport.isChecked() && delay >= ticksToTeleport.getValueI())
				sendPackets();
			
			// Teleport on item switch
			if(onItemSwitch.isChecked()
				&& slot != MC.player.getInventory().getSelectedSlot())
				sendPackets();
		}
	}
	
	@Override
	public void onSentPacket(PacketOutputEvent event)
	{
		// Intercept teleport confirmation packets
		if(event.getPacket() instanceof TeleportConfirmC2SPacket telepacket
			&& ateChorus && !sending)
		{
			telePackets.add(telepacket);
			event.cancel();
		}
	}
	
	@Override
	public void onReceivedPacket(PacketInputEvent event)
	{
		// Intercept position packets from chorus fruit teleportation
		if(event.getPacket() instanceof PlayerPositionLookS2CPacket posPacket
			&& ateChorus)
		{
			event.cancel();
			
			// Store destination position for rendering
			Vec3d pos = posPacket.change().position();
			cposX = pos.x;
			cposY = pos.y;
			cposZ = pos.z;
			gotPosition = true;
		}
	}
	
	@Override
	public void onRender(MatrixStack matrixStack, float partialTicks)
	{
		// Draw line to destination if available
		if(drawLine.isChecked() && ateChorus && gotPosition)
		{
			Vec3d start = new Vec3d(posX, posY + 1, posZ);
			Vec3d end = new Vec3d(cposX, cposY + 1, cposZ);
			
			RenderUtils.drawLine(matrixStack, start, end, lineColor.getColorI(),
				false);
		}
	}
	
	public void sendPackets()
	{
		if(!ateChorus)
			return;
		
		sending = true;
		
		// Send all queued teleport confirmation packets
		while(!telePackets.isEmpty())
			MC.getNetworkHandler().sendPacket(telePackets.poll());
		
		delay = 0;
		ateChorus = false;
		sending = false;
		gotPosition = false;
	}
	
	@Override
	public String getRenderName()
	{
		if(autoTeleport.isChecked() && ateChorus)
			return getName() + " [" + (ticksToTeleport.getValueI() - delay)
				+ "]";
		
		return getName();
	}
}
